Лекция 01: Подготовка
Для создание мода потребуются три приложения:
1. Visual studio: 
2. Notepad++: 
3. ILSpy:


------
------
Лекция 02: Сосотав мода. События 

Мод состоит из 7 основыных папок:
About - содержит информацию о моде
Assemblies - содержит доп библиотеки 
Defs - содержит объекты
Languages - содержит переводы
Patches - патчи
Source - звуки
Textures - текстуры

About содержит
PublishedFileId.txt - содержит ид мода в стим
About.xml - информация о моде
Preview.png - картинка для отображенеия 640x400

Assemblies 
Содержит dll библиотеки. Порядок загрузки важен. Начинаем название с цифр (0,1,2)

Defs (предметы, строения)
Можно создавать любое кол-во папок и название внутри с любой вложенностью. Для игры они все будит хранится в Defs.

Languages 
Содержит языки. Название языка такое же как и ядре.
Содержит две основных папки DefInjected (для полей предмета) и Keyed (ключ-значения для событий и информации).
В DefInjected создаются папки наименования которой соответствуют классу предметов (обязательно).

Patches
Позволяют манипулирвоать значением дефов не на уровне кода. Наприме изменитить категорию


---

Игровые события:
1) Инциденты - происходят по щелчку, случайно (взрыв, рейд)
2) Игровые условия - являются активными определеное время (радиация)

---

Подготовка Visual Studio:
1) В VS выбираем: Библиотека классов (.NET Framefork)
2) В ностройках проекта (Properties) изменяем платформу:
Платформу выбираем Net Framfork 3.5 Client Profile
3) Добавляем библиотки в ссылки:
Ссылки--> Добавить ссылку.. --> Обзор
Через обзор находим игру и папку RimWorldWin64_Data/Managed в ней.
Потребуются Assembly-CSharp.dll (содежит исходный код игры) и UnityEngine.dll (сожержит вектора и значения)
Для удобства скопируем эти библиотеки в папку с проектам (Libs)
Добавим библотки в студии
4) Откроем библиотки в ILSpy 
Через поиск можно находтить нужные предметы и методы
Проследить корень вызовов

При содании классов следует по возможности руководствовать правилом именования разрботчиков игры. Перед названием класс указываем его принадлженость (Если это событие - Инцидент, если настроки -Кондишен и  т.д.)
IncidentWorker_TestIncident.cs
Класс с нашим инцидентом должен наследоватся от класс IncidentWorker
Находим класс IncidentWorker через ILSpy

Класс содежит:
IncidentDef def; - содержит деф событие (описание)
float AdjustedChance - содежит шанс события (по умолнию равно базовому шансу)
bool CanFireNowSub - проверка на разрешение вызова события

У всех инцидетнов есть таргер. Все таргеты можно посмотерть в IncidentTargetDef и IncidentTargetDefOf
World - распространяется на весь мир
Caravan - распространяется на ваш караван
Map_RaidBecon - локальное когда драка караваном
Map_PlayerHome - локальное на карте игрока
Map_Misc - локальное на все остальные карты

IncidentParms - генерируется рассказчиком, содержит параметры


Для игрового события переопределяем два основных метода
CanFireNowSub(вызвается расказчиком) и TryExecuteWorker (вызвается через геймМод)

В папке Core находим нужный Defs для нашего события. События находятся в папке Storyteller скопирем нужный инцидент из Core в папку Defs нашего мода и открем через нотпад.

Удаляем все инцидента кроме одного который будим редактировать (сымый последний)
defName - уникальный идентификатор события (неможет заканчиватся на цифры)
label - отображаемое название
category - доступные котегории содержатся в классе IncidentCategoryDef (оставим Misc)
allowedBiomes - выбираем биомЫ (список) где будит происходить событие
targetTags - выбераем где будит происходить событие (например на карте игрока Map_PlayerHome)
Установка настрок когда может произоти событие
baseChance - шанс вызвоа события от 0 до 100
earliestDay - минимальное количество дней между повтором события

Что бы привязать наш класс к инциленту нужно указать его workerClass. Указываем в нем имя класса. Имя копируется полностью вместе с namespace

В Visual Studio уберем для библиотек локальное копирование, что бы она не помещалась в скомпилированый мод.
Свойства-->Библиотека-->Настройка-->Копировать локально--> false

Собирем библиотку и копируем в папку Assemblies нашего мода. Можно осуществить проверку мода в игре.

Когда нам требуется вызват уведомелние о событи добавлем
SendStandardLetter();

Что бы информация о событии отразилась корректно необходимо исправить xml файл добавив поля для описания (можно скопировать из другого события)
		<letterLabel>Текст с названиемt</letterLabel>
		<letterText>Описание события в рамке события</letterText>
		<letterDef>PositiveEvent</letterDef> /**тип сообщения цвет и звук/


После создание объекта создадим для него перевод:
В папке DefInjected создаем папку IncidentDef. Это название совпадает с базовым классом события. Для удобства шаблон скачаем из соответствующе папки в core


----


Создадим событие с  условием (будит длится некоторе время)
Определим новый класс
GameCondition_TestCondition : GameCondition
Содержит:
GameConditionManager gameConditionManager; - управления событиями для карты 
duration  - длительность
и.т.д
Основные методы:
Init() - определяет что будит в начале события
GameConditionTick() что будит происходить каждый тик
End() что произодет по оканчанию события


После создания класса и сборки новой библиотеки, необходимо создать Def для условия Incidents_World_Conditions. шаблон можно скопировать из Core 
Указываем имя и описание, задем нужные параметры
Для  <gameCondition>TestGameCondition</gameCondition> можно задать отдельные настрокий, также копиреум из ядра GameConditions_Misc.xml


Для того что бы связать условие необходимо GameConditions_Misc.xml связать с классом 	<conditionClass>LearningModBuildings.EventMod.Events.GameCondition_TestCondition</conditionClass>




------
------

Лекция 03: HediffDef. Атрибут DefOf, Сложный перевод.

Состояние пешки (здоровье, протезы)
Состояния хранятся в Hediffs_Global_Misc.xml
Класс в dll - HediffDef

Основные поля XML:
lethalSeverity - прогресс болезни (указывается предельное значения для достижения смерти)
initialSeverity - начальное состояние болезни
tendable (может ли быть перевязанна)
comps -  доплняет компонеты к болезни (отображет эффекты когда перевязано, сколько держится, какой эффект и т.д.)



Поля класса соответствуют:
public List<HediffStage> stages; - Список стадий течения болезни 
public bool isBad = true; - Является ли болезнь плохой (опьянение)
public ThingDef spawnThingOnRemoved; - Что появится если будуит удален, например протез



Сложные переводы
Некоторые поля не имеют своего ключа. Например Hediffs_Global_Misc для лейблов стадий болезни где используются списки получитиь ключ затруднительно
Для этого в методе по умолчанию наименование поле переименовано в значение вложенного текста, что бы осуществить перевод используют имена указаные в лейбле
public void PostLoad()
{
	this.untranslatedLabel = this.label;
}
 <label>middle</label> <TestHeddiff.stages.middle-0.lavel>Статия</TestHeddiff.stages.middle-0.lavel>
!! Пробелы заменяются на нижние подчекривания







GI.CS.RimWorold.Mods
LearningModBuildings.EventMod








 

